/*
 * @(#)JGraphGraphvizEncoder.java 1.0 12-MAY-2004
 * 
 * Copyright (c) 2001-2004, Gaudenz Alder and van woods
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution.
 * - Neither the name of JGraph nor the names of its contributors may be used
 *   to endorse or promote products derived from this software without specific
 *   prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package org.jgraph.util;

import java.text.DateFormat;
import java.util.Date;
import java.util.Hashtable;
import java.util.Iterator;

import org.jgraph.JGraph;
import org.jgraph.graph.GraphModel;


/**
 * @author Gaudenz Alder
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
public class JGraphGraphvizEncoder {
	
	static transient Hashtable hash;

	public static String encode(JGraph graph, Object[] cells) {
		hash = new Hashtable();
		DateFormat dateformat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);
		String date = dateformat.format(new Date());
		StringBuffer gv = new StringBuffer("/* Graphviz file generated by " +
			"JGraph - " + date + " */" +
			"\n\ndigraph G {");

		// Create external keys for nodes
		for (int i = 0; i < cells.length; i++)
			if (JGraphUtilities.isVertex(graph, cells[i]))
				hash.put(cells[i], new Integer(hash.size()));

		// Process Nodes
		Iterator it = hash.keySet().iterator();
		while (it.hasNext()) {
			Object node = it.next();
			gv.append(encodeVertex(graph, hash.get(node), node));
		}

		// Process Edges
		int edges = 0;
		for (int i = 0; i < cells.length; i++)
			if (graph.getModel().isEdge(cells[i]))
				gv.append(encodeEdge(graph, new Integer(edges++), cells[i]));

		// Close main tags
		gv.append("\n}");
		return gv.toString();
	}


	private static String encodeVertex(JGraph graph, Object id, Object vertex) {
		if (id==null) return "";
		String label = graph.convertValueToString(vertex);
		if (label==null) label = "";
		return "\n\t" +
		       id.toString() +
			   " [label=\"" + label + "\", " +
			   "shape=\"box\"];";
	}

	private static String encodeEdge(JGraph graph, Object id, Object edge) {
		GraphModel model = graph.getModel();
		String from = null;
		Object es = model.getSource(edge);
		if (es != null) {
			Object ps = hash.get(model.getParent(es));
			if (ps != null)
				from = ps.toString();
// debug	if (es != null)
//				from = graph.convertValueToString(model.getParent(es));
			String to = null;
			Object et = model.getTarget(edge);
			if (et != null) {
				Object tp = hash.get(model.getParent(et));
				if (tp != null)
					to = tp.toString();
// debug	if (et != null)
//				to = graph.convertValueToString(model.getParent(et));
			}
			if (from != null && to != null)
				return "\n\t" + from + " -> " + to + ";";
		}
		return "";
	}

}
