/*
 * $Id: NewGraphViewWizard.java,v 1.1 2004/12/07 17:53:23 bdickie Exp $
 *
 * Repository Explorer and Repository Grapher
 * Copyright (C) 2004 Blake Dickie
 *
 * This program is free software; you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation; either version 2 of the License, or 
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
 * MA 02111-1307 USA
 *
 */

package ca.uvic.cs.gold.bdickie.graphview;

import java.awt.CardLayout;
import javax.swing.tree.*;
import java.util.Date;
import javax.swing.*;

import java.util.regex.Pattern;

import dateselectbox.DateButton;

import ca.uvic.cs.gold.bdickie.db.DBConnection;
import ca.uvic.cs.gold.bdickie.explorer.FileSystemRenderer;
import ca.uvic.cs.gold.bdickie.explorer.TreeModelGenerator;
import ca.uvic.cs.gold.bdickie.graphview.framework.GraphSettings;
import ca.uvic.cs.gold.bdickie.fs.*;

/** The dialog used for getting the GraphSettings.  Uses the wizardish
 *  progressive information at a time approch.
 *
 * @author  Blake Dickie
 */
public class NewGraphViewWizard extends javax.swing.JDialog {
    private int currentView;
    private GraphSettings settings;
    private Date[] dateRange = null;
    private DefaultListModel extensionList = new DefaultListModel();
    
    private final static int VIEW_FIRST = 0;
    private final static int VIEW_MODE = VIEW_FIRST;
    private final static int VIEW_ROOT = VIEW_MODE + 1;
    private final static int VIEW_DATE = VIEW_ROOT + 1;
    private final static int VIEW_EXTENSIONS = VIEW_DATE + 1;
    
    /** Creates new form NewGraphViewWizard */
    public NewGraphViewWizard(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        TreeModelGenerator.setShowFiles(false);
        initComponents();
        
        dateRange = DBConnection.getInstance().getDateRange();
        
        startDate = new DateButton();
        startDate.setDate(dateRange[0]);
        endDate = new DateButton();
        endDate.setDate(dateRange[1]);
        panStartDate.add(startDate);
        panEndDate.add(endDate);
        pack();
        currentView = VIEW_FIRST;
        setButtonCaptions();
        settings = new GraphSettings();
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        groupViewMode = new javax.swing.ButtonGroup();
        panMain = new javax.swing.JPanel();
        panSelectMode = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        radioEdited = new javax.swing.JRadioButton();
        radioAuthors = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jTextArea2 = new javax.swing.JTextArea();
        panSelectRoot = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeSelectRoot = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jTextArea1 = new javax.swing.JTextArea();
        panSelectTime = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panStartDate = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        panEndDate = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jTextArea3 = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        panSelectExtensions = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtRegularExpression = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jTextArea4 = new javax.swing.JTextArea();
        panButton = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        butBack = new javax.swing.JButton();
        butNext = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setTitle("New Graph Wizard");
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        panMain.setLayout(new java.awt.CardLayout());

        panSelectMode.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        radioEdited.setSelected(true);
        radioEdited.setText("File Edited");
        groupViewMode.add(radioEdited);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(radioEdited, gridBagConstraints);

        radioAuthors.setText("Primary Author");
        groupViewMode.add(radioAuthors);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(radioAuthors, gridBagConstraints);

        panSelectMode.add(jPanel2);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTextArea2.setEditable(false);
        jTextArea2.setText("Select the type of graph you want \nto create.");
        jTextArea2.setBackground(javax.swing.UIManager.getDefaults().getColor("control"));
        jTextArea2.setFocusable(false);
        jPanel3.add(jTextArea2, new java.awt.GridBagConstraints());

        panSelectMode.add(jPanel3);

        panMain.add(panSelectMode, "card0");

        panSelectRoot.setLayout(new java.awt.GridLayout(1, 0));

        treeSelectRoot.setCellRenderer(new FileSystemRenderer());
        treeSelectRoot.setModel(TreeModelGenerator.getDirectoryModel());
        jScrollPane1.setViewportView(treeSelectRoot);

        panSelectRoot.add(jScrollPane1);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jTextArea1.setEditable(false);
        jTextArea1.setText("Select the directory that you want\nto create the graph for.\n\nYou can select the entire\nrepository, but such graphs\nmay not turn out well for large\nrepositories.");
        jTextArea1.setBackground(javax.swing.UIManager.getDefaults().getColor("control"));
        jTextArea1.setFocusable(false);
        jPanel1.add(jTextArea1, new java.awt.GridBagConstraints());

        panSelectRoot.add(jPanel1);

        panMain.add(panSelectRoot, "SelectRoot");

        panSelectTime.setLayout(new java.awt.GridLayout(1, 0));

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Start Date:");
        jPanel5.add(jLabel1, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        jPanel5.add(panStartDate, gridBagConstraints);

        jLabel2.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel5.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        jPanel5.add(panEndDate, gridBagConstraints);

        panSelectTime.add(jPanel5);

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.Y_AXIS));

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jTextArea3.setEditable(false);
        jTextArea3.setText("Select the time range you want\nto show in the graph.\n\nThis will allow the graph to\nonly accocate space in the \ngraph for files that will exist\nin this range.");
        jTextArea3.setBackground(javax.swing.UIManager.getDefaults().getColor("control"));
        jTextArea3.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 30, 0);
        jPanel7.add(jTextArea3, gridBagConstraints);

        jPanel6.add(jPanel7);

        jButton5.setText("All Dates");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel8.add(jButton5);

        jPanel6.add(jPanel8);

        panSelectTime.add(jPanel6);

        panMain.add(panSelectTime, "card4");

        panSelectExtensions.setLayout(new java.awt.GridLayout(1, 0));

        jPanel10.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Regular Expression Filter:");
        jPanel10.add(jLabel3, new java.awt.GridBagConstraints());

        txtRegularExpression.setPreferredSize(new java.awt.Dimension(180, 19));
        txtRegularExpression.setMinimumSize(new java.awt.Dimension(120, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel10.add(txtRegularExpression, gridBagConstraints);

        panSelectExtensions.add(jPanel10);

        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.Y_AXIS));

        jPanel12.setLayout(new java.awt.GridBagLayout());

        jTextArea4.setEditable(false);
        jTextArea4.setText("If you want to futher limit the\nfiles that will be shown in the\ngraph you can specify a POSIX\nregular expression that will be\ncompared to a file's path.");
        jTextArea4.setBackground(javax.swing.UIManager.getDefaults().getColor("control"));
        jTextArea4.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 30, 0);
        jPanel12.add(jTextArea4, gridBagConstraints);

        jPanel11.add(jPanel12);

        panSelectExtensions.add(jPanel11);

        panMain.add(panSelectExtensions, "card4");

        getContentPane().add(panMain, java.awt.BorderLayout.CENTER);

        panButton.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butBack.setText("Back");
        butBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBackActionPerformed(evt);
            }
        });

        jPanel9.add(butBack);

        butNext.setText("Next");
        butNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNextActionPerformed(evt);
            }
        });

        jPanel9.add(butNext);

        panButton.add(jPanel9, java.awt.BorderLayout.CENTER);

        panButton.add(jSeparator1, java.awt.BorderLayout.NORTH);

        getContentPane().add(panButton, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        startDate.setDate(dateRange[0]);
        endDate.setDate(dateRange[1]);
    }//GEN-LAST:event_jButton5ActionPerformed
    
    private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed
        CardLayout layout = (CardLayout)panMain.getLayout();
        
        switch(currentView) {
            case VIEW_MODE:
                if (radioEdited.isSelected())
                {
                    settings.setViewMode(new ca.uvic.cs.gold.bdickie.graphview.TimesModified.TimesModifiedView());
                } else if (radioAuthors.isSelected()) {
                    settings.setViewMode(new ca.uvic.cs.gold.bdickie.graphview.AuthorsView.AuthorsViewMode());
                }
                break;
            case VIEW_ROOT:
                if (treeSelectRoot.getSelectionPath() == null)
                    return;
                DefaultMutableTreeNode node = (DefaultMutableTreeNode)treeSelectRoot.getSelectionPath().getLastPathComponent();
                Object value = node.getUserObject();
                if (value instanceof File) {
                    File f = (File)value;
                    settings.setRoot(f.getParent());
                } else if (value instanceof Directory) {
                    settings.setRoot((Directory)value);
                } else
                    return;
                
                
                break;
            case VIEW_DATE:
                settings.setStartDate(startDate.getDate());
                settings.setEndDate(endDate.getDate());
                break;
            case VIEW_EXTENSIONS:
                if (!txtRegularExpression.getText().equals("")) {
                    try {
                        Pattern p = Pattern.compile(txtRegularExpression.getText());
                    } catch(Exception e) {
                        JOptionPane.showMessageDialog(this, "Please enter a valid regular expression.");
                        return;
                    }
                }
                settings.setRegexpPattern(txtRegularExpression.getText());
                
                hide();
                break;
        }
        
        currentView++;
        setButtonCaptions();
        layout.next(panMain);
    }//GEN-LAST:event_butNextActionPerformed
    
    private void butBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBackActionPerformed
        CardLayout layout = (CardLayout)panMain.getLayout();
        layout.previous(panMain);
        currentView--;
        setButtonCaptions();
    }//GEN-LAST:event_butBackActionPerformed
    
    private void setButtonCaptions() {
        butBack.setEnabled(currentView != VIEW_FIRST);
        butNext.setText((VIEW_EXTENSIONS == currentView ? "Finished" : "Next"));
    }
    
    public static GraphSettings showWizard(JFrame parent) {
        NewGraphViewWizard wizard = new NewGraphViewWizard(parent, true);
        wizard.show();
        return wizard.settings;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butBack;
    private javax.swing.JButton butNext;
    private javax.swing.ButtonGroup groupViewMode;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JPanel panButton;
    private javax.swing.JPanel panEndDate;
    private javax.swing.JPanel panMain;
    private javax.swing.JPanel panSelectExtensions;
    private javax.swing.JPanel panSelectMode;
    private javax.swing.JPanel panSelectRoot;
    private javax.swing.JPanel panSelectTime;
    private javax.swing.JPanel panStartDate;
    private javax.swing.JRadioButton radioAuthors;
    private javax.swing.JRadioButton radioEdited;
    private javax.swing.JTree treeSelectRoot;
    private javax.swing.JTextField txtRegularExpression;
    // End of variables declaration//GEN-END:variables
    
    private DateButton startDate;
    private DateButton endDate;
}

/* ChangeLog:
 *   $Log: NewGraphViewWizard.java,v $
 *   Revision 1.1  2004/12/07 17:53:23  bdickie
 *   Done Repository Grapher and added GPL boilerplate to older files.
 *
 */
