%!PS-Adobe-2.0
%--------------------------------------
%az_ini.ps for AZ_PROJ v1.1.6beta4
%CreationDate: 4 Nov 98, last modified Jun 2001
%--------------------------------------
%
% AZ_INI.PS (C) 1994-2001 Joseph Mack NA3T and Michael Katzmann NV3Z/VK2BEA/G4NYV
%
% AZ_INI.PS is freely distributable software for non-commercial use;
% you can redistribute it and/or modify it under the terms of the
% GNU General Public License as published by the Free Software Foundation;
% either version 2, or (at your option) any later version.
% All commercial rights belong to us.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with az_ini.ps; see the file COPYING. If not, write to
% the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
%
%--------------------------------------
% az_ini.PS - Initialisation file for AZ_PROJ.PS
%
% Most of the AZ_PROJ variables that are customisable are in this file.
% Unless a variable depends on a previously defined variable the
% order of listing of these variables can be changed to suit yourself.
% Once you get the idea of how to use this file, you can remove comments
% etc, to make a smaller (easier to edit) working file.
%
% You will probably only ever change a small number of variables in which
% case you might try a config.ps file (see samples provided with the package).
%
%--------------------------------------
% Dictionaries in Level 1 Postscript devices cannot grow (as they can in
% level 2) on demand. 'userdict' will therefore run out of space, so
% we define our own local dictionary.
%
% DO NOT MOVE OR CHANGE THESE dict DECLARATIONS UNLESS YOU KNOW WHAT YOU ARE DOING
/az_dict 400 dict def
 az_dict begin
% for v1.1.2
% originally I wrote data onto the viewable page line-by-line 
% as it was read in from the data file(s).
% This became a problem, mostly for TV transmitters many of which were on the same tower,
% leading to many callsigns/freq strings being overlaid and unreadable if you 
% allowed plotting of all freqs.
% I originally put in TV stations expecting people to only use the freqs near 
% 6m to look for openings.
% Not many people seemed to be using the TV station list and I decided not to do anything 
% about the problem of overlaid text/symbols for multiple stations at one site.
% However Mel Martin VE2DC and Bob McCormick W1QA convinced me that this approach wouldn't
% do any longer and that some people wanted this to work properly.
% So here's a dictionary to keep transmitters in. The transmitters are entered by
% 6 char gridsquare and any that are in the same grid square will have their symbols overlaid
% but the identifying strings will be entered in order below each other.
% Originally I allowed users to put the identifying strings above/below/side/topright-left etc
% about the symbol. This works fine for only one transmitter at a site, but 
% if you are plotting TV stations then the identifying strings should be
% at the same level (eg left and right, or below-left and below-right) for readability.
/transmitter_dict 20000 dict def
% transmitter_dict begin

%--------------------------------------
% Some definitions so we can start
%
/on 	true		def
/off	false		def
/yes	true		def
/no	true		def

%--------------------------------------

%Colors
% need to set these up before we initialise colors of map objects

% You can print maps on B&W printers just fine.
% Postscript will print each color as some particular grey or other.
% If you want lots of information in a B&W format, you will probably have
% to print several different maps, since B&W with a lot of different
% features will be cluttered.


%Colors - starter kit, make your own
% RGB values
/white		{ 1.0  1.0  1.0  }  def	% white
/grey		{ 0.25 0.25 0.25 }  def	% 75% black
/greymedium     { 0.5 0.5 0.5 }  def	% 50% black
/blue		{ 0.0  0.0  1.0  }  def	% blue
/darkblue	{ 0.0  0.0  0.5  }  def	% blue
/green		{ 0.0  1.0  0.0  }  def	% green
/darkgreen	{ 0.0  0.4  0.0  }  def	% green
/cyan		{ 0.0  1.0  1.0  }  def	% cyan
/red		{ 1.0  0.0  0.0  }  def	% red
/magenta	{ 1.0  0.0  1.0  }  def	% magenta
/purple		{ 0.5  0.0  1.0  }  def	% magenta
/brown		{ 0.67 0.33 0.0  }  def	% brown
/white		{ 1.0  1.0  1.0  }  def	% white
/lightgray	{ 0.8  0.8  0.8  }  def	% lightgray
/gray		{ 0.5  0.5  0.5  }  def	% gray
/darkgray	{ 0.3  0.3  0.3  }  def	% darkgray
/lightblue	{ 0.33 0.33 1.0  }  def	% lightblue
/verylightblue	{ 0.75 0.75 1.0  }  def	% lightblue
/lightgreen	{ 0.33 1.0  0.33 }  def	% lightgreen
/verylightgreen	{ 0.75 1.0  0.75 }  def	% lightgreen
/lightcyan	{ 0.33 1.0  1.0  }  def	% lightcyan
/lightred	{ 1.0  0.33 0.33 }  def	% lightred
/verylightred	{ 1.0  0.75 0.75 }  def	% lightred
/lightmagenta	{ 1.0  0.33 1.0  }  def	% lightmagenta
/lightyellow	{ 1.0  1.0  0.5  }  def	% yellow
/darkyellow	{ 0.625  0.625  0 }  def	% yellow
/yellow		{ 1.0  1.0  0.0  }  def	% yellow
/orange		{ 1.0  0.5  0.0  }  def	% orange
/purple		{ 1.0  0.0  1.0  }  def	% purple
/black		{ 0.0  0.0  0.0  }  def
/steelblue	{ 0.85 0.85 1.0  }  def
%/city_color     { 1.0  0.5  0.0  }  def
%/steelblue	{ 0.85  0.85  0.85 }  def


%--------------------------------------
%TITLE - will appear across top of page.
%
% Example title, comment out if not needed.
%/Title (How far is ICSE 2010? Version 0.5) def

% y posn of header (is Title, above)
% header is in center of page, occasionally needs to be moved up and down
/header_label_height	{ atom 40 mul } def

% y posn of footer (Copyright notice and your QTH name, entered below)
% footer is in corner, doesn't usually get in way of map
% increase to move towards center of page
/footer_label_height	{ atom 30 mul } def

/Title1 (abcdfdadfdfdfdfd) def
/Title2 (       144                         ) def
/Title3 (               222                 ) def
/Title4 (                       432         ) def
/Title5 (                                MHz) def

%--------------------------------------
%QTH
%
% Lat/long are in decimal degrees (not deg/min/sec)
% lat: +ve is north, -ve is south
% lon: +ve is east , -ve is west
%v1.1beta6
%lat/lon are now strings, can have leading or trailing blanks.
%input is either lat/lon or gridsquare/ignored.
%ie gridsquare string can be entered at lat, and the lon input will be ignored
%
%examples
%standard format
%/lat_QTH (41.6)		def /lon_QTH (-72.7)	def /QTH_name (ARRL HQ)		def
%with blanks
%/lat_QTH (  41.6  )		def /lon_QTH (    -72.7)	def /QTH_name (ARRL HQ)		def
%with gridsquare
%/lat_QTH (FN42ab)		def /lon_QTH (-72.7)	def /QTH_name (ARRL HQ)		def
%with gridsquare and blanks
%/lat_QTH ( FN42ab  )		def /lon_QTH (-72.7    )	def /QTH_name (ARRL HQ)		def
%
%
% Default QTH, you can change it once you've got the package running
%/lat_QTH (35.9439)	def /lon_QTH (-79.0261)	def /QTH_name (NA3T/N3REQ Chapel Hill, NC, FM05lw)	def
%/lat_QTH (60.6831)	def /lon_QTH (-135.08)	def /QTH_name (Whitehorse)	def
/lat_QTH (-36.92)       def /lon_QTH (174.78)   def /QTH_name (Auckland)	def
%/lat_QTH (34.66667)	def /lon_QTH (135.50000) def /QTH_name (Osaka)	def
%/lat_QTH (-30.016)	def /lon_QTH (-51.217) def /QTH_name (Porto Alegre)	def
%/lat_QTH (49.22)	def /lon_QTH (-123.10) def /QTH_name (Vancouver)	def
%/lat_QTH (48.416)	def /lon_QTH (-123.35) def /QTH_name (Victoria)	def
% To change the QTH, try one of these (or your own QTH)
%/lat_QTH (0)		def /lon_QTH (25)	def /QTH_name (Deepest Darkest Africa)		def
%/lat_QTH (-23.77)	def /lon_QTH (133.93)	def /QTH_name (Alice Springs, The Dead Heart)	def
%/lat_QTH (41.6)	def /lon_QTH (-72.7)	def /QTH_name (ARRL HQ)		def
%/lat_QTH (-35.0)	def /lon_QTH (-160.0)	def /QTH_name (Antipodes of Mediterranian) def % interesting view of Europe
%/lat_QTH (-34)		def /lon_QTH (18)	def /QTH_name (Cape Town)	def
%/lat_QTH (43.80)        def /lon_QTH (-79.12)   def /QTH_name (Kingston)	def
%/lat_QTH (-27.0)	def /lon_QTH (-108.0)	def /QTH_name (Easter Is.)	def
%/lat_QTH (0.1)		def /lon_QTH (0.0)	def /QTH_name (Equator)		def
%/lat_QTH (22.0)	def /lon_QTH (-82.0)	def /QTH_name (Havana)		def
%/lat_QTH (21.31)	def /lon_QTH (-157.86)	def /QTH_name (Honolulu)	def
%/lat_QTH (52)		def /lon_QTH (95)	def /QTH_name (Kyzyl)		def
%/lat_QTH (39)		def /lon_QTH (-9)	def /QTH_name (Lisbon)		def
%/lat_QTH (52) 		def /lon_QTH (0)	def /QTH_name (London)		def
%/lat_QTH (-55)		def /lon_QTH (160)	def /QTH_name (Macquarie Is.)	def
%/lat_QTH (-38)		def /lon_QTH (146)	def /QTH_name (Melbourne)	def
%/lat_QTH (35)		def /lon_QTH (-90)	def /QTH_name (Memphis)		def
%/lat_QTH (-20)		def /lon_QTH (120)	def /QTH_name (Mid Oceania)	def
%/lat_QTH (55.76)	def /lon_QTH (37.62)	def /QTH_name (Moscow)		def
%/lat_QTH (89.1)	def /lon_QTH (0.1)	def /QTH_name (North Pole)	def
%/lat_QTH (8.0)		def /lon_QTH (-80.0)	def /QTH_name (Panama)		def
%/lat_QTH (-25.0)	def /lon_QTH (-130.0)	def /QTH_name (Pitcairn Is.)	def
%/lat_QTH (-89.9)	def /lon_QTH (0.0)	def /QTH_name (South Pole)	def
%/lat_QTH ( 59)		def /lon_QTH (18)	def /QTH_name (Stockholm)	def
%/lat_QTH (-34)		def /lon_QTH (151)	def /QTH_name (Sydney)		def
%/lat_QTH (36)		def /lon_QTH (140)	def /QTH_name (Tokyo)		def
%/lat_QTH (-22.8)	def /lon_QTH (-44.8)	def /QTH_name (Rio)		def
%/lat_QTH (-2)		def /lon_QTH (-29)	def /QTH_name (Rwanda)		def
%/lat_QTH (40.0)	def /lon_QTH (60.0)	def /QTH_name (Somewhere in Russia)	def
%/lat_QTH (48.0)	def /lon_QTH (-124.0 )	def /QTH_name (Vancouver)	def
%/lat_QTH (38.92)	def /lon_QTH (-77.05)	def /QTH_name (Washington DC)	def
%/lat_QTH (38.98847)	def /lon_QTH (-76.58033) def /QTH_name (NV3Z Annapolis, FM18rx)	def
%/lat_QTH (39.42933)	def /lon_QTH (-77.42536) def /QTH_name (NA3T/N3REQ Frederick, FM19gk)	def
%/lat_QTH (35.9439)	def /lon_QTH (-79.0261)	def /QTH_name (NA3T/N3REQ Chapel Hill, NC, FM05lw)	def
%/lat_QTH (38.48)	def /lon_QTH (-90.02)	def /QTH_name (K4SSO Arnold, MO, EM48tk) def
%/lat_QTH (40.430601)	def /lon_QTH (-86.909722) def /QTH_name (KB9SSS - W. Lafayette, IN, EM60mk) def
%/lat_QTH (43.70)        def /lon_QTH (-79.42)     def /QTH_name (Toronto) def
%/lat_QTH (39.92)        def /lon_QTH (116.43)     def /QTH_name (Beijing) def

%--------------------------------------
%QTH_marker
%a cross-hair marker is placed at the QTH

/QTH_marker	on 	def

%--------------------------------------
% CENTER OFFSET:
%
% You can translate the map in x,y across the page.
% The azimuthal projection is still made from your QTH,
% but center of the page is no longer your QTH.
% This feature is used if you live on the edge of a continent and want
% the center of the map in the center of the continent (your QTH will be on one side).
% Or else you want a map of Europe as it looks from your QTH in USA,
% but you only want Europe on the map (and not NA and the Atlantic Ocean).
%
%

/center_offset	false	def		% on: use following lat/lon for center of map
					%off: use QTH for center of map.

%example offset position - middle of North America
/lat_center		(55)	def	%(real or int)
/lon_center		(-105.0)	def	%(real or int)

% To change center of map try one of these
%
%    40	-90	% centred on middle of N.A
%    59	 18	% centred on Stockholm
%   -34	151	% centred on Sydney
%   -24	133	% centred on Alice Springs (Middle of Oz)
%    47   7	% centred on Berne
%   -10	155	% centred on Guadalcanal


% Caution: Using center_offset with nmea.dat:
%
% It's simplest to have center_offset off if reading in a nmea.dat
% file from a GPS receiver.
%
% If you have center_offset on, AZ_PROJ calculates the
% bearing/distance from the QTH to the offset_center and
% then translates the map by this amount for all subsequent
% calculations. If you then read in the nmea.dat file
% changing the QTH, the actual (offset) center will be displaced
% by the distance between the QTH in az_ini.ps and in nmea.dat.
% If this distance is small compared to the size of the map, then you
% probably will not notice anything. If the distance is large
% then the projection will still be correct (from the nmea.dat QTH)
% but the center of the map won't be where you asked it to be.
%
%
% Large Maps by joining several regular sized maps
%
% If you don't have a printer with A2 or A3 size paper,
% you can use this center_offset feature to make a map out of
% several regular sized maps.
% (The following used to be part of the FAQ Q3.)
%
%FAQ 3).Can I spread my map over several piece of paper, and
%later tape/staple/glue them together to make a bigger map?
%
%	Yes. The center_offset feature just translates
%the map up/down-left/right on the paper. It does not affect
%the projection, which is still done from the QTH, even if the
%QTH is off the edge of the paper. Thus it is possible to draw
%a map of North America, with a QTH in London as might
%be done for a 6m operator looking for trans-atlantic QSO's.
%The shape of NA will look vastly different from the mercator
%projection, but all the bearings and distances on the map are
%correct for a London QTH. (You can include the NA 6m beacons
%too).
%
%	To draw a 4-page map of the world: Draw a regular
%1 page map of the world (scale 2000km/cm), centered at
%your QTH. Find lat/lon of points about 1/2 way to the
%edge of the paper in the 4 directions 45, 135, 225, 315
%degrees. The use these 4 points as centers for 4 new
%(center_offset on) maps (do NOT change your QTH), using
%a scale of 1000km/cm.
%
%
%--------------------------------------
%SCALE
%
% mapping scale is the scale you see on the bottom of a real map,
% eg 1cm:100km, or 1cm:15 deg (angle subtended at earth's centre by
% a line along earth's surface). The distance from the equator to pole
% is 10,000km (thanks to Napoleon Bonaparte) or 90 deg.
% The radius of the map, on an 'A' size or A4 page (8.5x11"), is about 10cm.
% Hence -
% For whole world use 2000 kms/cm
% For whole world on half a page use 4000 kms/cm
% For continent use 400 kms/cm
% 200 kms/cm will fit 2 grid squares across at the equator
% For general VHF/UHF DX use 50 kms/cm
%
% The other type of scaling is in degrees of solid angle between points,
% subtended at earth's centre as a scale. The earth is 180 degrees
% from center to edge (circumference). Not a whole lot of people
% seem to be using this option

/scale_type	on	def	%on : use map_scale_deg as km/cm
				%off: use map_scale_deg as deg/cm %
					% haven't used the off feature
					% for so long I wouldn't be
					% surprised if it didn't work any more

/map_scale_deg	2000	def	% (real or int)
				% if using km/cm (above), then this number will be
				% converted to a deg type scale for internal calcs

% we need to remember the scale in km/cm
scale_type {map_scale_deg /map_scale_km exch def} if

%--------------------------------------
% resolution bins

/plotting_resolution	(high)	def	%(low), whole map at low res, for fast drawing
					%(auto), high res for small scale maps, lower res for large scale maps (eg whole world)
					%(high), whole map at high res, slow, but best picture

%--------------------------------------
%ORIENTATION
%
%uncomment one of these (AZ_PROJ will use the last one, if several are uncommented)
%
%/orientation	(portrait)			def	%note need ()'s around names, uncomment the one you want
/orientation	(landscape)			def
%/orientation	(orthographic-portrait)		def	%orthographic - with Australia at the top
%/orientation	(orthographic-landscape) 	def	%the normal orientation in the southern hemisphere (-:

% The orthographic orientations were inspired by
% McArthur's Universal Corrective Projection Map
% available from good Cartographers everywhere.
% S. McArthur 21 Turnbull St, Mornington, Vic, 3931. Australia, ph# 61-059-75-2227
% Dist by: Rex Publications, 413 Pacific Hwy, Artarmon, NSW, 2064 Australia ph# 61-02-428-3566.

%--------------------------------------
%antipodean feature
%
/draw_antipodes_mode	off	def

%--------------------------------------
%LAT/LON LINES and GRID SQUARES OUTLINES AND LABELLING
%
% You can draw lat/lon lines or grid squares.
% The lat/lon lines can be at any spacing (default 30deg)
% The gridsquares can be labelled.

% Pick one style of lat/lon lines by uncommenting that line

%/lat_lon_lines		(none) 		def	%no lat/lon lines
/lat_lon_lines		(lat_lon) 	def	%lat/lon lines at spacing of alternate_lat_spacing, alternate_lon_spacing
%/lat_lon_lines		(gridsquares) 	def	%gridsquares, options below


% Options for each of these styles
% LAT/LON LINE SPACING
%
% The grid "squares" used by VHF operators are small on the scale
% of the whole world. Thus an HF operator might want lat/lon lines
% more widely spaced than at the 10x20 deg spacing of grid locators
% You may want every 15 deg for longitude to show time zones.
% If you just want some rough idea of where everything is,
% then 30 deg spacing is fine.
%
/alternate_lat_spacing	30 def
/alternate_lon_spacing	30 def  %15 deg = 1hr


% Labelling style, v1.04
%
% arrl style has smaller labels (letters and numbers) and is better suited to
% maps with a lot of detail.
% az_proj style has big labels - they look about right for us, if you need a map
% with distance, bearing and with grid squares to mark off as you go through a contest.
%
% two choices, 	(az_proj) 	big letter/numbers in center of square (the original method)
%		(arrl) 		the style used in ARRL maps, small labels,
%				number square labels in bottom left corner of square
%				letter square ("fields") labels in center of square
%
%				Note "(" and ")" are required to make it a string
%
%Uncomment one of the next two lines
%/grid_locator_labelling_style	(arrl) def % Style used by ARRL in their maps
/grid_locator_labelling_style	(az_proj) def % Original AZ_PROJ style

% Labelling/Drawing of Grid Squares

% Letter squares are 20x10 deg (eg FM) (also called "fields")
% Number squares are 2x1 deg (19 of FM19)
% If squares are on, the border of the squares will be drawn.
% If labels is on, then a label (eg FM or 19) will be included in the grid_square

/draw_letter_square_borders	on	def	%(on/off)
/draw_letter_square_labels	on	def	%(on/off)
/draw_number_square_borders	off	def	%(on/off)
/draw_number_square_labels	off	def	%(on/off)


% Labelling style
% The letters/numbers making the label can be drawn in outline or filled.
/letter_square_labels_outlined	on	def	%(on/off)
					%on  letters are outlines only
					%off letters are solid filled
/number_square_labels_outlined	on	def	%(on/off)
					%on  numbers are outlines only
					%off numbers are solid filled


%Labelling pattern
/label_all_number_squares_in_a_letter_square 	off	def
			% on/true - label all number_squares
			% off/false - label number squares only on the border
			%(ie outer edge) of a letter square
			%(setting to "off" gives less clutter)

/number_square_edges_dashed	on 	def
			% drawing pattern for edges of number squares
			% on/true - dashed, off/false - continuous line
			% (on makes number squares less dominant than letter squares - as they should be)

% number of letter grid-squares north, south, east & west
% of your own letter square that will be filled with number_squares
% Example:
% if you live in grid locator FM,
% and if the values below are 1,1,0,1
% then FN (grid square to north), FL (south), and EM (west)
% will have number_squares drawn on them, but GM (east) will not.
% If all are set to 0, only your own local letter grid square will be filled.
% To turn off ALL number squares (including your own)
% set "/draw_number_square_borders" to off

% To cover the whole world in any direction(s):
% Enter -1 for each direction.
% (Large numbers, eg 18, 18, 18, 18 are OK too)
%

/grid_locator_number_squares_northern_limit	1 def
/grid_locator_number_squares_southern_limit	1 def
/grid_locator_number_squares_eastern_limit	1 def
/grid_locator_number_squares_western_limit	1 def


%bug fix: if QTH is exactly on a letter_square edge (say on 60.000 deg E meridian)
% then the routine as originally written will produce no grid squares
% to E or W of the QTH. In this case I've forced the routine to produce
% number squares on both sides. To save yourself this harrowing complication,
% you could always put in a lat/lon like (0.001, -0.002), instead of (0,0).
% There are also occasional problems with QTH's on number grid square
% boundaries (eg 38N). Until that's fixed, use 38.01 say.

% this is the color of log and lat circles
/grid_locator_letter_color	/lightgray	cvx def 
/grid_locator_number_color	/blue	cvx def
%Note these colors determine both the color of the grid squares and the labels
/shade 1.0 def	% reduce luminance of (ie darken) grid boundaries
		% useful for B&W printers where colored lines can be quite light
		% 1.0 - same color as grid labels
		% 0.66 - darker
		% 0.0 - black

% factor to increase the thickness of the equator and the UTC (zero meridian) lines
% 1 for no emphasis, i.e. same as other lat/lon lines
% if grid_line_emphasis is 3, the these two lines, will be 3x width of
% the other lat/lon lines.
%
/grid_line_emphasis 3 def


%Haven't got this working yet

%/data_modifier			()			def
%the symbol /grid_locator_qth_0 is not used.
%Instead the grid_locator for the center of the projection is used
%/grid_locator_qth_1		()		def
%/grid_locator_qth_2		()		def
%/grid_locator_qth_3		()		def
%/grid_locator_qth_4		()		def
%/grid_locator_qth_5		()		def
%/grid_locator_qth_6		()		def
%/grid_locator_qth_7		()		def
%/grid_locator_qth_8		()		def
%/grid_locator_qth_9		()		def


%--------------------------------------
%GREYLINE (border between day and night)

% Uncomment one line.
% This (starting with v1.1) controls the greyline routines
% Now all the explanations etc have been moved to az_proj.ps

/greyline_type	(none)				def	% default
%/greyline_type	(greyline_by_date_time)		def	% draw greyline for date/time below (see /month /day /hour), these greylines may have no particular relationship to sunrise/set at your QTH.
%/greyline_type	(sunrise_at_QTH)		def	% draw sunrise and sunset lines for date below (hour is ignored)
%/greyline_type	(sunset_at_QTH)			def	% draw greyline at sunset for your QTH throughout the year
%/greyline_type	(sunrise_and_sunset_at_QTH_by_date)	def	% draw greyline at sunset for your QTH throughout the year

%If drawing sunset/rise lines at a QTH, the dates to draw
/greyline_months_plotted_array [ 6 7 8 9 10 11 12 ] def	% month of year
/greyline_days_plotted_array [ 22 ] def 		% day of month


% if greyline_type == (date)
/shade_night_time	on 	def	%on: shade nighttime part of earth
					%off: just draw greyline

/draw_analemma		off	def	%on:
					%off:


% If you are plotting greylines for a particular date/time/position of the sun then:
%
% sun_lat, sun_lon, if you want to enter it manually
% This is the lat/lon point on the earth's surface, where the sun is at the zenith.
% (The technical name is the subsolar point).
%
% More likely you'll want the program to calculate the location of the sun
% You can do this by entering date/time information, which
% can be entered manually (below, by uncommenting the date/time info)
% or by other mechanisms, such as reading a file which contains
% date/time info, eg a nmea.dat file generated from your GPS receiver.
% Since the gps data is read in after the date/time below, the
% gps data will overwrite the date/time info entered here.
%
% ie priorities for calculating sun_lat, sun_lon
% 1. gps info from NMEA.DAT file
% if not found then
% 2. date/time entered here
% if not found then
% sun_lat, sun_lon entered here.

% date and time (*****UTC/Zulu*****, NOT LOCAL)
% Note that the position of the sun doesn't move much from
% year to year at the same date/time. The maximum change is 4 mins
% due to leap year. This change is not going to make any functional
% difference for greyline propagation calculations from year to year.
% In this case you can leave the year fixed if you like.
%
1996	/year	exch def % (int)
03	/month 	exch def % (1..12)
22 	/day	exch def % (1..31)
0000 	/hour 	exch def % (0000..2359)

%
% If you live between the two tropics, you can have the sun at your QTH
% by uncommenting the next two lines (no checks are done, -23.5<lat_QTH<23.5)
%	lat_QTH /sun_lat exch def %puts the sun overhead at your QTH
%	lon_QTH /sun_lon exch def
%
% Example of arbitary location of sun
%-16.5364	/sun_lat exch def %(-23.5..23.5)
%165.0		/sun_lon exch def %(-179.9..180.0)
%

/greyline_color	/blue	cvx def
%/night_color	/verylightblue cvx def
/night_color	/steelblue cvx def
		% if greyline_color is the same as night color,
		% then the greyline will be invisible
		% (you may want this for cosmetic reasons)

% Colors for the greyline(s)

% The color for the the sun symbol
% I know, I know, the sun is red, but everything else is already red or blue
/sun_color			/green	cvx def

/greyline_sunrise_color		/green	cvx def
/greyline_sunset_color		/blue	cvx def

% This next one is for my debugging - you can leave this next one alone.
/greyline_draft_mode	off	def	%on  - jaggy  edges of greylines
					%off - smooth edges of greylines

%--------------------------------------
%COMPASS
%

% to establish direction from your QTH, a compass is
% centered on your QTH (even if QTH is center offset)

/draw_compass_circumference	off	def	%(on/off) draw compass circumference
%if draw_compass_circumference is off and draw_compass_spokes is on
% then the spokes will go to the antipodes (see below)
/draw_compass_spokes		off	def	%(on/off) draw compass spokes
/compass_spoke_interval 	15 	def	%(int, degrees between spokes)
/compass_label_increment 	15 	def	%(int, degrees between labels)

	% the spacing of major radial compass spokes (lines) is 30 deg (see comment in routine "\draw_spokes")
	% and are drawn right onto the QTH.
	% the spacing of minor radial compass spokes (lines) is given by compass_spoke_interval.
	% Suggested values are 10,15 or 45.
	% The minor lines do not go to the center of the compass
	% (ie the QTH) so as not to obliterate the QTH.

/compass_spokes_to_antipodes	off 	def
	% on/true - spokes go beyond compass rose to the edge of the world
	% off/false - compass spokes go only to circumference of compass
	% Note: if compass rose is not drawn, but the spokes are, then
	% spokes go out to antipodes no matter what value is entered here.


%Compass circumference
% The radius of the compass is changed automatically in multiples of
% 1,2,5, to make nice round numbers for scaling. If your QTH is not
% at the center of the page, part of the circumference of the compass
% will/may go off the page. You can fiddle with the code in
% draw_bearing_rose to make the radius smaller. Here is a fiddle
% I've used. Change the number to suit you. The number "0.75"
% here will fit the largest compass that sits inside 3/4 of
% the page rather than the largest compass that sits
% inside the whole page. This allows you some latitude to move
% the center of the page away from the QTH and still have compass
% contained within the page.

%/compass_coerce	{0.75 mul}	def	% reduce compass circle size
/compass_coerce 	{} 		def 	% the normal size
 					% pick one by commenting out the other

/compass_color		/verylightred	cvx def	% yellow looks OK in daylight,
					% but vanishes under incandescent light

/compass_label_color	/red	cvx def	% the numbers which label the directions of 0,15..345 deg
/compass_line_width	{ atom 2 mul master_line_width_factor div} def	%compass line width
																%labels for directions (30, 60, 90... etc)

%--------------------------------------
%OUTER_BORDER
%
/draw_outer_border	off def
			% (on/off) border at the antipodes
			% on is useful for maps of the whole world
			% for maps of a smaller area, the border is
			% still calculated but it is off the edge of the map
			% (ie you can leave it on all the time if you like)

/outer_border_color	/red	cvx def


%--------------------------------------
%DXCC
%

/DXCC_callsigns		on  def	% on: dxcc country labelled by callsign
				%off: dxcc country labelled by country name

%v1.03
%pick (ie uncomment) one
% suggested by Igor Sokolov,  UA9CDC , (N3TOD) E-mail: igor@sokol.pssr.e-burg.su
/dxcc_label_position    	(capital)	def
/dxcc_label_position    	(circumference)	def

/dxcc_labels_around_border	off def
				% on: print country label radially around border of map along bearing to country
				%off: print country label just above Country Capitol
				% note must have scale =2000km/cm or labels will be outside the page
				% labelling gets rather crowded around the border.
				% Names which were spread all over the map are now all crunched together
				% Thanks to a UA op for suggesting this.

/circle_dxcc 			off def
				% if /dxcc_labels_around_border off,
				% (ie if dxcc label is on the Capital of the country concerned) then
				% on: print country label along circumference of concentric circles about QTH
				%off: print country label along horizontal straight lines

/dxcc_color		/black	cvx def
/dxcc_special_color	/green	cvx def
/dxcc_special_color_2	/red	cvx def

%--------------------------------------

% Note as from v1.01, frequency stuff has been moved to /bands_plotted
%
% Frequency mask for selecting dxcc countries to be displayed.
% If you want to display only the dxcc countries that you've
% worked on 80m CW, then uncomment 80 in the array below and CW in the
% array below that. If you want to display countries that have been worked
% on 80 and and the countries that have been worked on 40m,
% then remove the "%" infront of both 80 and 40.
% Leave all other entries with a "%" as the first character in the line.
%
% You can add frequencies and modes. Eg if we get back the bands above 200m,
% say 320m, and can do spark mode on it again, then
% add 320 to the band options below
% and (SPARK) to the mode options below.
% When you make a SPARK contact on 320m with a
% country add 320 SPARK to the dxcc.dat file.
%
% You can use entries in any way you want here, just as long as it's
% consistent with the use and numbering in the dxcc.dat files.
% A "10" or a "10G" in the following array will flag all of the entries in
% the dxcc.dat file with "(10 xxx)" in them.
% What the 10 means is up to you - it can be 10GHz, 10m or 10MHz.
%
% This array can have any number of elements (including none).
% Only one element allowed per line, lines in any order.
% Add, remove or comment (put "%" in front of number) out elements to suit.

/dxcc_modes_plotted
% Mode mask for selecting dxcc countries to be displayed.
%
% If you want to display only the dxcc countries that you've
% worked on 80m CW, then uncomment CW in the array below, and 80 in the
% array above. If you want to display countries that have been worked on
% CW and the countries that have been worked on SSB,
% then remove the "%" infront of both CW and SSB.
%
% Leave all other numbers with a "%" as the first character in the line.
% Note the spelling is case sensitive.
%
% The mode result is AND'ed with the band result.
% ie if you ask for 80 CW you will get only those
% countries that you've worked on 80 CW.
% If you want to list all countries that you've worked on 80 or on CW,
% then you'll either have to fiddle a bit or write the code yourself
% (and send it to us as well).
% If you want the countries that you've worked on CW, on any band,
% then you'll have to uncomment all the band entries in the
% dxcc_bands_plotted array above.
%
% This array can have any number of elements (including none).
% Only one element allowed per line, lines in any order.
% Add, remove or comment (have "%" in front of number) out elements to suit.
[
(CW)
%(SSB)
%(AM)
%(FM)
%(SWL)
%(RTTY)
%(SSTV)
%(packet)
%(EME)
%(aurora)
%(MS)
%(Es)
%(you can add any string you like to match the corresponding string in the dxcc.dat file, even a string as long as this, as long as you reproduce it exactly in the dxcc.dat file)
] def

%--------------------------------------
%GEOGRAPHICAL/POLITICAL FEATURES
%
% Depending on the scale, some maps will be cluttered by unnecessary info.
% E.g. When doing a whole world map centered on North America,
% the US states and Canadian Provinces produce a lot of clutter
% here you can turn selected things on or off. If you're doing
% a map of the whole world, most of this stuff will be turned off
%
/state_borders_dashed	on def	%  on: state borders are 1-3 pattern of dashes
				% (see Postscript book for explanation)
				% off: states borders are straight lines
				% (and they look like country borders)

% Note: the linewidths used to draw these features are
% in the array /feature_width in az_proj.ps

/draw_coast_lines		on def	% you can turn off the coast lines
/draw_country_borders		on def  % and all these things here
/draw_political_states		on def	% suggested by beta tester Brian Derx
%/not_used
/draw_islands			on def
/draw_lakes			on def
/draw_rivers			on def
/draw_opposite_countries 	on def
/draw_USA_call_areas		on def  
%/not_used
/draw_county_borders		on def
					% you can have both us_states and
					% USA_call_areas (which are drawn last)
					% but you may only want to have only one of
					% them. If you have the call areas on, then
					% include call_label_us.dat in the files drawn.
					% This will number each call area.


/feature_color
	[
	{ grey } 	% coast lines
	{ grey }	% country borders
	{ yellow }	% Canadian Provinces
%	{ brown }	% US State boundaries
	{ brown }	% not used
	{ grey }	% islands
	{ cyan  }	% lakes
	{ blue }	% rivers
%	{ brown }	% Australian state boundaries
	{ magenta }	% opposite (antipodean) countries
	{ magenta }	% USA_call_areas
	{ greymedium }	% not used
	{ green }	% county borders
	] def

%LAKES
/lake_fill	on def
		% on/true - fill lakes with designated lake color
		% off/false - draw only outline of lakes, when the body of lake
		% is whatever is already drawn on the paper


% if lake_fill 	on, then this determines the color of lake edge
% if lake_fill off, lake edge will be colored with feature_color for lake
%/lake_edge_color {feature_color lake 1 sub get exec} def	%will make it the same as the lake
/lake_edge_color {black} def					%pick your own


%--------------------------------------
% line widths

%/width_mh		{ atom 4 mul } def	%letter grid locator line width
/coarse_gl_width	{ atom 2 mul } def	%letter grid locator line width
/fine_gl_width		{ atom 1 mul } def	%number grid locator line width
/QTH_marker_gl_width	{ atom 8 mul } def	%letter grid locator line width

%--------------------------------------
%symbol_string_locations
%many symbols (mountains, rovers, beacons...) can have two strings associated
%with them eg (mountain: name, elevation) (TV: call sign, power).
%these strings can be displayed to the left, right, above or below
%the location of the symbol.
%Moutains sometimes have rovers on them, so I've chosen the strings for
%mountain symbols to be above and below, while the rover strings
%are to the left and right.
%You can also choose not to print the strings
%
%possible values
%(left)
%(right)
%(above)
%(above2)
%(below)
%(below2)
%(above-right)
%(below-right)
%(above-left)
%(below-left)
%(noprint)
% Note: above2 is above the above position, etc.

%Note in az_proj.ps, I've adjusted the code for the following positions.
%If you want to move rovers from left/right to above/below,
%you'll probably have to fiddle the code in az_proj
%--------------------------------------

/beacon_station_string_1_location	(above)		def
/beacon_station_string_2_location 	(below)		def

/mountain_string_1_location 		(above)		def
/mountain_string_2_location 		(below)		def

/repeater_station_string_1_location 	(right)		def
%/repeater_station_string_1_location 	(above-right)		def
%/repeater_station_string_2_location 	(below-right)		def
/repeater_station_string_2_location 	(left)		def

/rover_station_string_1_location 	(left)		def
/rover_station_string_2_location 	(right)		def

%--------------------------------------
%
%defaults for generic symbols
/generic_border_color	/black cvx def

%--------------------------------------
%"BC:" data type (includes TV:)
%BC stations
/BC_font		/Helvetica 	def
/BC_font_size		{atom 25 mul}	def	%for high res printer (300dpi)
%/BC_font_size		{atom 35 mul}	def	%for low res printer (75dpi, eg gifs)
/BC_font_color 		/green cvx 	def	%defined in parse_data_type
/BC_color 		{BC_font_color}	def	%BC_color is the color for standard BCs
%/BC_color		/black cvx 	def	%BC_color is the color for standard BCs
/BC_low_power_limit	100		def	%stations below this power are not plotted
						%Many TV stations are low power linear
						%translators, designed to give a local region
						%(eg a valley) TV reception. These are not
						%useful as propagation markers, but
						%will greatly clutter the map. Most TV stations
						%in North American are either 100KW or <100W


%Pick one of these symbols (by uncommenting it) for the symbol
%for broadcast (BC = MW, FM, TV stations)
%since many BC stations are omni (eg TV stations),
%the non-directional tower symbol is a reasonable choice.
%Nested circles show directional radiators by a fan like symbol
%Also see symbol_string_locations (below)

%/BC_symbol_type 		(circles)	def
%/BC_symbol_type 		(tower)		def
%/BC_symbol_type 		(generic_dot)	def
%/BC_symbol_type 		(generic_square)	def
/BC_symbol_type 		(generic_triangle)	def

%freq offset colors for TV stations 
/BC_color_minus_offset		/red cvx	def	%TV station with -10KHz offset
/BC_color_plus_offset		/blue cvx	def	%TV station with +10KHz offset
/BC_color_Z_offset		/black cvx	def	%TV station with exactly +0KHz offset
/BC_color_N_offset		/grey cvx	def	%TV station with approx +0KHz offset, 
							%(freq not controlled accurately)

%polarisation colors
/BC_color_H_polarisation	/red	cvx	def	%horizontal polarisation
/BC_color_V_polarisation	/blue	cvx	def	%vertical polarisation
/BC_color_M_polarisation	/magenta cvx	def	%mixed polarisation (depends on direction)
%
%--------------------------------------
%"beacon:" data type
% the symbol for a beacon is a nested set of circles, with 1 circle
% for each 10^n mW of power. Thus
% 1mW -> 1 circle
% 1W  -> 3 circles
% 9W  -> 3 circles
% 10W -> 4 circles
%
% If the beacon is directional, then a fan of sectors replaces the circles.
% For the format of the "beacon:" line, look at the beacon.dat file(s)
% supplied with AZ_PROJ.
%
/nested_circle_size	{atom 5 mul} 		def
/draw_beacon_symbol	{draw_nested_circles}	def % only one choice at the moment
/beacon_font		/Helvetica 		def
/beacon_font_color 	/green cvx 		def
%/beacon_font_size 	{atom 25 mul} 		def % for regular printers
/beacon_font_size 	{atom 35 mul} 		def % for 75 dpi output (like .gif)
%/beacon_color	   	{beacon_font_color}	def % color for standard beacons
/beacon_color	   	/blue cvx 		def % color for standard beacons
/beacon_default_power	0.001			def % beacons of unknown power (-1) are assumed to have this power

%--------------------------------------
%"Repeater:" data type
% uses same symbol as beacon on the assumption that beacons and repeaters
% will not be plotted on the same map. If you want both on the same map
% send me a few ideas for repeater symbols. File format is the same
% as for beacon.
%
%/repeater		false		def  	% need to define this
/repeater_font		/Helvetica 	def
/repeater_font_size	{atom 25 mul}	def
/repeater_font_color	/black cvx 	def
/repeater_color     	/red cvx 	def	%color for repeater symbol
/repeater_symbol_size	{atom 7.5 mul}	def

%--------------------------------------
%"rover:" and "mountain:" data types
% rover symbol is a VW Beetle with a whip antenna on the roof
% mountain symbol is a black filled equilateral triangle

/mountain_font			/Helvetica def
/mountain_font_size		{ atom 30 mul } def
/mountain_font_color		/black cvx def
/mountain_symbol_color 		/black cvx def
/mountain_symbol_special_color 	/red cvx def

/rover_font			/Helvetica def
/rover_font_size		{ atom 30 mul } def
/rover_font_color		/lightblue cvx def
/rover_symbol_color 		/lightblue cvx def
/rover_symbol_rel_size		0.5	def 	%smaller for smaller symbol
						%original size of symbol derives from my first drawing
/bearing_fontsize		{ atom 20 mul } def


% bearing distance lines to ROVER, MOUNTAIN etc
%
/draw_distance_bearing_lines	on	def
		%on - line is drawn from QTH to ROVER or MOUNTAIN
		%off - lines is not drawn

/show_bearing 	on def
		%on - bearing to ROVER or MOUNTAIN is put on the line
		%off - line is not labelled

/show_distance	on def
		%on - distance to ROVER or MOUNTAIN is put on the line
		%off - line is not labelled

%--------------------------------------
%BANDS
%
%Filled grid squares (code derived from "worked gridsquares")
%is now used also for filling gridsquares with population density, elevation.
%The lines in the *.dat file still have a frequency parameter,
%which I've arbitrarily set to 50MHz (and put a "(50)" in /bands_plotted), 
%so that I can plot elevation data etc.
%This frequency parameter originally was so that you could put all your 
%contest data in one file and select gridsquares for plotting by band. 
%I've never used this feature, instead using separate files for each band. 
%This results in a setup where if you plot a transmitter file 
%(eg beacons, fm broadcast transmitters) and choose to plot only 144MHz beacons, 
%then the data which is not 144MHz (the elevation data) will not be plotted. 
%I've put in this kludge which is looked for when plotting etopo5 (elevation data) etc.
/ignore_band	true	def
%
% The bands_plotted array has replaced
%	beacons_plotted
%	grid_bands_plotted
%	repeaters_plotted
%	dxcc_bands_plotted
% of early versions of AZ_PROJ on the assumption that only one
% of these choices will be plotted on any one map.
% Thus you select the band of interest and then feed the appropriate .dat file

% Bands are turned on and off by a string assoc with that band.
% The string for the band can be any unit as long as it is the same
% both here (in the array /bands_plotted) and freq entry in the .dat file.
% Thus 10 could represent 10m, 10MHz, 10GHz or TV Channel 10
% in the files which contain the band entry 10.
% You can have numbers eg 10, or a string eg 10G or TenGHz if you like.
% 2m could be represented as 2, 2m or 144.
% Just choose your convention and stick with it.
%
% I (NA3T) only use this array for VHF beacons and TV stations (also beacons).
% This array has expanded beyond my worst nightmares. I originally
% designed it to turn VHF beacons on and off by band and thus only
% had a few entries (50, 144,432,1296). Adding HF didn't increase
% the size of the array all that much (adding 160,80,40,20,15,10).
% With AZ_PROJ v1.04, Broadcast Stations (list from Colin K4SSO,
% aa0yt@mo.net) can be plotted. For the purposes of AZ_PROJ, a
% BC station is anything high power and commercial, that may be
% useful as propagation markers, eg AM (=BC= 550->1630KHz) SW, FM 88-108 MHz,
% TV stations, Radars. For these, the freqs go from DC to daylight.
% Clearly switching TV stations on and off by MHz (or channel) involves
% entering a lot of numbers in the array below and is not as convenient
% as I originally planned. Let me know if you have better any ideas.
%
%
% If the entries "144" and "1296" are in this array,
% then all beacons/repeaters/TV stations/grids_worked/dxcc_countries_worked
% of freq 144.xxx and 1296.xxx will be plotted.
% This array can have any number of integer elements (including none).
% Only one element allowed per line, lines in any order.
% Add, remove or comment (put "%" in front of number) out elements to suit.
%
% useful entries:
% The blank ie ( ) or a null ie () entries just below  
% will match a blank/null in the band field in the .dat file.
% The (*) will allow a match of any band entry in the .dat file.
% 
/bands_plotted
[
()
( )
(*)
] def
%--------------------------------------
/bands_plotted_2
%this has everything in it
[
()
( )
(*)
(%AM BC 540-1630kHz)
(%0)
(%1)
(%)
(%HF, Wavelength, m)
(%160)
(%80)
(%75)
(%40)
(%30)
(%20)
(%17)
(%15)
(%12)
(%10)
(%)
(%Ham, MHz)
(28)
(50)
(51)
(52)
(%53)
(%70)
(%71)
(144)
(145)
(146)
(147)
(222)
(%224)
(432)
(%440)
(902)
(903)
(926)
(1295)
(1296)
(2304)
(2312)
(3456)
(5759)
(5760)
(10248)
(10256)
(10265)
(10368)
(24192)
(%)
(%Microwave, GHz)
(5)
(10)
(%)
(%TV channels (North America and VK))
(%0)
(%1)
(%2)
(%3)
(%4)
(%5)
(%5A)
(%6)
(%7)
(%8)
(%9)
(%10)
(%11)
(%12)
(%13)
(%14)
(%15)
(%16)
(%17)
(%18)
(%)
(%FM freqs MHz, North America)
(88)
(89)
(90)
(91)
(92)
(93)
(94)
(95)
(96)
(97)
(98)
(99)
(100)
(101)
(102)
(103)
(104)
(105)
(106)
(107)
(108)
(%)
(%US/North America TV by (video) freq,)
(%not all of these freqs are equally useful as propagation markers.)
(%you can delete the ones you'll never use)
(%(beware there is a 55 in NA_TV and Euro_TV, don't turn both on).)
(%55)
(%61)
(%67)
(%77)
(%83)
(%175)
(%181)
(%187)
(%193)
(%199)
(%205)
(%211)
(%471)
(%477)
(%483)
(%489)
(%495)
(%501)
(%507)
(%513)
(%519)
(%525)
(%531)
(%537)
(%549)
(%555)
(%561)
(%567)
(%573)
(%579)
(%585)
(%591)
(%597)
(%603)
(%615)
(%621)
(%627)
(%633)
(%639)
(%645)
(%651)
(%657)
(%663)
(%669)
(%675)
(%681)
(%687)
(%693)
(%699)
(%705)
(%711)
(%717)
(%723)
(%729)
(%735)
(%741)
(%747)
(%753)
(%759)
(%765)
(%771)
(%777)
(%783)
(%789)
(%795)
(%801)
(%807)
(%813)
(%819)
(%825)
(%831)
(%837)
(%843)
(%849)
(%855)
(%861)
(%867)
(%873)
(%879)
(%885)
(%combined Euro/Irish/NA/Australian VHF TV)
(46)
(48)
(49)
(53)
(55)
(57)
(59)
(60)
(61)
(62)
(63)
(64)
(67)
(77)
(83)
(85)
(86)
(%93)
(%95)
(%102)
(%138)
(%175)
(%176)
(%181)
(%182)
(%183)
(%184)
(%187)
(%189)
(%191)
(%192)
(%193)
(%196)
(%199)
(%200)
(%203)
(%204)
(%207)
(%208)
(%209)
(%210)
(%211)
(%215)
(%216)
(%217)
(%223)
(%224)
(%)
(%)
(%Euro TV near 6m)
(%48)
(%49)
(%53)
(%55)
(%62)
(%VK TV (starts at Channel 0 = 46MHz, has an extra channel between 5 and 6 called 5A))
(%46	%Ch 0)
(%57)
(%64)
(%86)
(%95)
(%102)
(%138	%Channel 5A, good for 2m openings, the sound carrier is just below 2m)
(%175)
(%182)
(%189)
(%196)
(%209	% Ch 10)
(%216)
(%527)
(%534)
(%541)
(%548)
(%555)
(%562)
(%569)
(%576)
(%604)
(%611)
(%618)
(%625)
(%632)
(%639)
(%646)
(%653)
(%660)
(%667)
(%674)
(%681)
(%688)
(%695)
(%702)
(%709)
(%716)
(%723)
(%730)
(%737)
(%744)
(%751)
(%758)
(%765)
(%772)
(%779)
(%786)
(%793)
(%800)
(%807)
(%814)
(%LF Beacons 160-190kHz)
(160)
(161)
(162)
(163)
(164)
(165)
(166)
(167)
(168)
(169)
(170)
(171)
(172)
(173)
(174)
(175)
(176)
(177)
(178)
(179)
(180)
(181)
(182)
(183)
(184)
(185)
(186)
(187)
(188)
(189)
(190)
(%MF beacons 1600-1700kHz)
(1600)
(1601)
(1602)
(1603)
(1604)
(1605)
(1606)
(1607)
(1608)
(1609)
(1610)
(1611)
(1612)
(1613)
(1614)
(1615)
(1616)
(1617)
(1618)
(1619)
(1610)
(1621)
(1622)
(1623)
(1624)
(1625)
(1626)
(1627)
(1628)
(1629)
(1620)
(1631)
(1632)
(1633)
(1634)
(1635)
(1636)
(1637)
(1638)
(1639)
(1630)
(1641)
(1642)
(1643)
(1644)
(1645)
(1646)
(1647)
(1648)
(1649)
(1640)
(1651)
(1652)
(1653)
(1654)
(1655)
(1656)
(1657)
(1658)
(1659)
(1650)
(1661)
(1662)
(1663)
(1664)
(1665)
(1666)
(1667)
(1668)
(1669)
(1660)
(1671)
(1672)
(1673)
(1674)
(1675)
(1676)
(1677)
(1678)
(1679)
(1670)
(1681)
(1682)
(1683)
(1684)
(1685)
(1686)
(1687)
(1688)
(1689)
(1690)
(1691)
(1692)
(1693)
(1694)
(1695)
(1696)
(1697)
(1698)
(1699)
(1700)
(1701)
(1702)
(1703)
(1704)
(1705)
(1706)
(1707)
(1708)
(1709)
] def
%--------------------------------------
% DISTANCE CIRCLES CENTERED AT QTH
%
% Drawing circles around QTH at defined distances
% Turning this on, turns off the default compass circumference
% (you can still have the spokes from the compass to give direction)
%

%/distance_circles	(compass) def 	% (distance_circles)
/distance_circles	(distance_circles) def 	% 

					% (none)
					% (compass) draw compass, 
						%then look at draw_compass_circumference and 
						%draw_compass_spokes to decide what part(s) 
						%of the compass to draw

/distances_plotted %( in km)
%
% Possible distances might be -
%	3100km for start of double hop F2
%	2300km for end of single hop F2.
%	1100km for end of Es single hop (aurora, Es, FAI)
%	500km minimum distance for F2 on 6m (MUF=144MHz)
%
% Maybe you just want a bull's eye drawn around your QTH at 200 km intervals
% This array can have any number of integer elements (including none).
% Only one element allowed per line
% Add, remove or comment (have "%" in front of number) out elements to suit.
% Circles are drawn in the order listed in the array.
% The last distance circle in this array will have compass bearings
% and labels drawn on it.
% Usually you will want this to be the circle with the largest radius.
[
%100
%200
%300
%400
%500
%600
%700
%800
%900
%1000
%1100
%1200
%1250
%1500
%2000
%2300
2500
%3000
%3100
%3750
5000
%6250
7500
%8750
10000
12500
15000
17500
%19000
20000
] def

%--------------------------------------
% "annotate:" data type

%see ANNOT.DAT
/annot_color		/green	cvx 		def
/annot_font		/Helvetica-Oblique 	def
/annot_font_size	{ atom 30 mul } 	def

%--------------------------------------
% "city:" data type, modelled after "annotate:"

/city_color		/darkblue	cvx 		def
/city_font		/Helvetica-Oblique 	def
%/city_font_size	{ atom 30 mul }		def % for 300dpi printers
/city_font_size		{ atom 45 mul }		def % for gif/png/screen (and other 75dpi devices)
/city_country		false			def % output style: false (city) or true(city,country)

%--------------------------------------
% "population_center:" data type, modelled after "city:" which is modelled after "annotate:"
% also uses the code from parse_label, which changes font size etc, with scale.
%
% with city, the absolute size of the printing on the page of city names does not change with scale, 
% ie the size of the string "New York" will always be (say) 2mm high.
% With population_center, the size of the string will change with scale. 
% As you zoom in the size of the cities already plotted (ie big cities eg "New York")
% will get bigger, and smaller cities will start to be shown (with smaller names).
%
% 

/population_center_font_color	/black	cvx 		def
/population_center_font		/Helvetica-Oblique 	def
/population_center_font_size	{ atom 30 mul }		def % for 300dpi printers
%/population_center_font_size	{ atom 45 mul }		def % bigger - for gif/png/screen (and other 75dpi devices)
%symbol is a filled circle 		% modelled after http://www.un.org/Depts/unsd/demog/nam+dyc.htm
/population_center_symbol_circumference_color	/black	cvx def
/population_center_symbol_fill_color		/red	cvx def
az_dict /population_threshhold undef		% don't plot by absolute threshhold, plot by scale
%/population_threshhold		10000	def
/people_per_map_scale_deg	50000	def	% the number of people in an urban agglomeration for plotting	
						% raising this number puts less towns on a map

% the table of scale <-> population shown is in the routines for drawing the population_center symbol

%--------------------------------------
%county, using population_center defaults (or close to it)

/county_font_color   		/black  cvx             def
/county_font         		/Helvetica-Oblique      def
/county_font_size    		{ atom 30 mul }         def % for 300dpi printers
%/county_font_size   		{ atom 45 mul }         def % bigger - for gif/png/screen (and other 75dpi devices)
%symbol is a filled circle              % modelled after http://www.un.org/Depts/unsd/demog/nam+dyc.htm
/county_symbol_circumference_color   /black  cvx def
/county_symbol_fill_color            /black  cvx def

%--------------------------------------
% "qra:" data type, modelled after "annotate:"

/qra_color		/blue	cvx 		def
/qra_symbol_color 	/blue	cvx 		def
/qra_font		/Helvetica-Oblique 	def
/qra_font_size		{ atom 30 mul }		def

%--------------------------------------
% "label:" data type

%example in call_label_w.dat
/label_color		{magenta}	def
%/label_color		{annot_color}	def
/label_font		{annot_font}	def
/label_font_size	{atom 45 mul} 	def % size of smallest font

%--------------------------------------
% "legend:" data type

%see qra_6mgr.dat
/legend_color		{red}		def
/legend_font		{annot_font}	def
/legend_font_size	{atom 45 mul} 	def % size of smallest font

%--------------------------------------
%"grid:" date type

/worked_grid_square_color	/verylightblue	cvx def
%other colors for making grid squares
/grid-red_color			/verylightred	cvx def	% -r red
/grid-green_color		/verylightgreen	cvx def	% -g green
/grid-blue_color		/verylightblue	cvx def	% -b green

%--------------------------------------
%"qso:" data type

/show_qso_callsigns	on def	%on :show callsigns at each end of the qso
				%off:don't show callsigns

/qso_color			/green cvx 		def
/qso_font			{annot_font}		def
/qso_font_size			{annot_font_size}	def

% The color for the callsigns at each end of the qso
% will normally be the same as that for the qso path,
% This is set by the data_modifier in the qso data line
% if you want the color to not change, but be constant for all qso_paths,
% uncomment this next line and choose a color (if annot_color isn't OK)
%/qso_font_color		{annot_color}		def
/qso_font_color		/darkyellow cvx 	def

%--------------------------------------
%band colors for qso dat type.
%if the band is 50, then in /draw_qso the color 50_color is chosen
%this was so I could draw QSOs of different bands on the same map.
%I've installed a table for 50,144,222 and 432 in /draw_qso
%you can add other bands if you want.

/50_color			/red cvx	def
/144_color			/yellow cvx	def
/222_color			/green cvx	def
/432_color			/cyan cvx	def
%--------------------------------------
%When to plot the grid squares

%Uncomment one, see below for explanation
%/grid_square_and_compass_drawing (before_geographical_data) def
%/grid_square_and_compass_drawing (before_regular_dat_files) def
/grid_square_and_compass_drawing (on_exit) def



% Explanation:
%
% Postscript writes/draws on the page, covering anything previously
% on the page as it goes. Thus solid colors (eg filled grid squares
% and filled lakes) should be drawn before lines (eg country borders
% from the .wdb files, grid square borders and text from features
% in az_ini.ps and/or the .dat files) which would be obliterated
% if the order of drawing was reversed.
% On the same principle, your own personal entries (the .dat) files
% should be drawn last since their content is generally unknown to the
% viewer and it doesn't really matter if they cover the compass bearings
% or geographical features (which you can mentally reconstruct out if
% partially occluded).
%
% The grid square borders (and labels) and the compass rose
% and radial lines are generated internally by AZ_PROJ and
% are not generated in response feeding external data (as happens
% for the geographical info in the .wdb files and the other
% data in the .dat files). The question then is when to trigger
% the drawing of these lines.
%
% Since it is likely that a map will contain some geographic data
% (a .wdb file) but not guaranteed that a .dat file will be plotted,
% then there are 3 convenient triggers for drawing these lines
% 1. before looking for any input
% 2. when detecting a .wdb input file
% 3. when detecting a regular (non-grid) .dat file
% 4. on exiting (ie on detecting EOF in the .dat file stream).
%
% If you follow the suggested order of sending data to AZ_PROJ
% ie grid.dat files with solid color fills
% .wdb files (lake_fill can be off or on)
% other .dat files (including grid.dat files using lines to fill grid
% squares, and .dat files with text data),
% then the order in which objects will be drawn is
%
% a. shading of the night time zone (internally generated
% b. -> Option 1 above for grid squares and compass <-
% c. solid filled grid.dat files
% d. -> Option 2 above for grid squares and compass <-
% e. .wdb files (geographical features, including solid filled lakes)
% g. -> Option 3 above for grid squares and compass <-
% f. other.dat files
% g. -> Option 4 above for grid squares and compass <-
%
%
% Problems:
% Option 1 will have lat/lon lines and the compass
% going under solid filled lakes and solid filled grid squares.
% This seems a bit unnatural to me and has not been implemented.
% Option 2 will have lat/lon lines and the compass
% going under only lakes but over filled grid squares.
% Option 3 will have political borders which are also
% major lat/lon lines, covered over by these lat/lon lines.
% Option 4, same problem as Option 3 but as well
% the compass and the grid square labels can cover up
% text and symbols from the .dat files
% Option 3 seems to be the least of all these evils,
% and I have left it as the default option.

% The switches in the code that are going to be activated are
%
%/draw_grid_square_borders_and_labels_before_maps false def
		% true - draw on reading the first line of any map
		% (ie when first read .wdb formatted info)
		% (OK to be true if lake_fill off)
		% false - ignore map information in making decision to
		% draw grid square borders and labels

%/draw_grid_square_borders_and_labels_before_regular_dat_files	false def
		% true - draw on before plotting any dat file except grid.dat
		% (OK to be true if lake_fill on)
		% false - ignore dat file information in deciding when to
		% draw grid square borders and labels

%If both of these are false, the program will draw the grid square
%borders and labels as it exits (ie after all the input files
%have been processed).


%Code that activates the order of drawing
grid_square_and_compass_drawing (before_geographical_data) eq
	{
	/draw_grid_square_borders_and_labels_before_maps true def
	%next one false so don't try to draw grid square borders etc twice
	/draw_grid_square_borders_and_labels_before_regular_dat_files false def
	}if

grid_square_and_compass_drawing (before_regular_dat_files) eq
	{
	/draw_grid_square_borders_and_labels_before_maps false def
	/draw_grid_square_borders_and_labels_before_regular_dat_files true def
	} if

grid_square_and_compass_drawing (on_exit) eq
	{
	/draw_grid_square_borders_and_labels_before_maps false def
	/draw_grid_square_borders_and_labels_before_regular_dat_files false def
	} if

%initialise saying that we haven't drawn the grid squares
/grid_square_labels_on_paper off def


%--------------------------------------
%Miscellaneous

%With maps covering smaller areas, the grid locator letters etc get bigger
%Some mechanism is needed to make the stroking of the letters thicker,
%otherwise they look wierd. Here is a fudge

/master_line_width_factor	0.5	def
map_scale_deg 500 le {/master_line_width_factor 1 def} if
map_scale_deg 100 le {/master_line_width_factor 2 def} if



%--------------------------------------
% Execution is sloooow.
% If you're calculating a map with ghostscript on a computer, you can
% use these variables to reassure yourself that something is actually
% happening and your computer has not locked up.

%	You can have these "on" if you have a launching window
%(ie a window which is different to the window displaying the map)
%to display these messages. You HAVE a lauching window in multitasking
%systems like Windows, DesqViewX, X-window. You DO NOT have a lauching
%window in MSDOS (where these messages will write all over your output)
%or on a postscript printer (where the messages will come out on
%subsequent pages). For these latter systems use "off".
%

/verbose on def
	% stdout will get notifications of progess
	% On a computer, stdout is the screen.
	% On a printer stdout goes to extra pages
	% following the wanted output.
	% ie turn off when printing to postscript printer.

%--------------------------------------
userdict
/#copies 1 put	% a postscript command, number of copies to be printed.
		% the printer doesn't have to re-calculate everything,
		% & so subsequent pages are fast.
%--------------------------------------az_ini.ps
