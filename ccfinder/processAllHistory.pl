#!/usr/bin/perl

$0 =~ m@/([^/]+)$@;
my $dir = $`; #'

push @INC, $dir ;


use DBI;
use strict;
use Getopt::Long;
use Pod::Usage;

require "ccfinder.pm";
require "processFunctions.pm";
require "softChange.pm";

my $coDir = "/tmp/co";
my $saveDir = "/tmp/save";
my $repo  = "file:///home/ender/mirror/svn.postgresql/trunk/pgsql/src";
my $findFiles = '*.c';
my $repoPrefix = "/tmp/co/";
my $suffix = '.cpp.ccfxprep';
my $callgraphBin = "$dir/create_callgraph.pl";

my $dryRun = 0; # do not compute diffs
my $verbose = 0;
my $debug = 0;
my $man = 0;
my $help = 0;
my $doCCfinder = 0;
my $getAllFiles = 0;

GetOptions("verbose"		  => \$verbose,
	   "debug"		  => \$debug,
	   "help"                 => \$help,
	   "man"                  => \$man,
           "ccfinder"             => \$doCCfinder,
           "repo=s"               => \$repo,
           "cloning"              => \$doCCfinder,
           "coDir=s"              => \$coDir,
           "saveDir=s"            => \$saveDir,
           "filesToProcess=s"     => \$findFiles,
	   "repoPrefix=s"         => \$repoPrefix,
	   "ccfindersuffix=s"	  => \$suffix,
           "getAllFiles"          => \$getAllFiles,
	   ) or pod2usage(2);


pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

pod2usage(1) if scalar(@ARGV) ==0 ;

my $dbName = $ARGV[0];

if ($dbName eq "") {
    die "$0 <dbName>\n";
}

my $db = softChange->new($dbName);

my @revs = $db->Get_MRs_FuncMod();

mkdir $saveDir;

# check out after first functions changed
my $first = $revs[0];

print "To process ", scalar(@revs), " total MRs\n";

while (@revs) {
    my $r = shift @revs;
    print "Checking out revision $r\n";
    print STDERR "Checking out revision $r\n";
    chdir "/tmp";
#    `rm -rf $coDir`;
    `mkdir $coDir`;
#    print `pwd`;
    chdir $coDir or die "unable to change to directory $coDir";
    print `svn co -r $r $repo`;

    my @filesInMR;
    if ($getAllFiles) {
        @filesInMR = $db->Get_Files_in_MR_FuncMod($r, " true");
    } else {
        @filesInMR = $db->Get_Files_in_MR_FuncMod($r);
    }

    # generate a listing of all the files in the revision
    `find ./src/backend/optimizer -name '$findFiles' -print |cut -c3- > allfiles.txt`;

    if ($doCCfinder) {

        Do_CCFinder($r, \@filesInMR);
        
        print "Finding the callgraph\n";
        `$callgraphBin`;

    }
    print "Copying the files\n";    
    Copy_CCFinder_Files($saveDir, $r, \@filesInMR, $repoPrefix, $saveDir,$suffix, $doCCfinder);    
}
# for apache, the very first version added all the C files...


#$dbh->disconnect;
exit 0;




__END__

=head1 NAME

sample - Using GetOpt::Long and Pod::Usage

=head1 SYNOPSIS

$0 [options] cvsLogFile...

GetOptions(
           "verbose"		  => \$verbose,

	   "debug"		  => \$debug,
	   "help"                 => \$help,
	   "man"                  => \$man,
           "repo=s"               => \$repo,
           "cloning"              => \$doCCfinder,
           "coDir=s"              => \$coDir,
           "saveDir=s"            => \$saveDir,
           "filesToProcess=s"     => \$findFiles,
	   "repoPrefix=s"         => \$repoPrefix,
	   "ccfindersuffix=s"	  => \$suffix,
           "getAllFiles"          => \$getAllFiles,
	   ) or pod2usage(2);

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=item B<--verbose>

Show messages showing progress


=back

=head1 DESCRIPTION

  B<This program> will take as an input a file generated by running CVS
  log in a module. It creates two filenames as output:

  revisions.txt which contains each of the revisions for each of the
  files. The format of the output is:

  file                  -- full file name (matches filenames.txt)
  revisionId            -- id of the revision
  date                  -- date when it hapend
  author                -- userid of who made the change
  state                 -- I don't really know what this is
  linesAdded            -- number of lines added
  linesDeleted          -- number of lines deleted
  rev                   -- log message given to cvs commit

  the filenames.txt file contains the files in the log:

  filename,             -- the full file name (matches revisions.txt)
  basename,             -- only filename, without path or extension
  extension             -- extension
  directory             -- directory where the file is
  latest version        -- latest cvs version
  branch version        -- branch, if it exists
  totalrevisions        -- total number of revisions
  selected revisions    -- I don't really know what this is
  inAttic (0 or 1)      -- 0/1 whether the  file is in the attic
  rcsfilename           -- full path name of the RCS file
			   (no ,v at the end)


  Files are ; delimited, one record per line. The character \b is
  replaced with NEWLINE and ; is replaced with SEMICOLON


=cut
