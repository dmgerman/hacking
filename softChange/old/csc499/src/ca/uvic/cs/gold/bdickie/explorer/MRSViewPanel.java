/*
 * $Id: MRSViewPanel.java,v 1.2 2004/12/07 17:53:23 bdickie Exp $
 *
 * Repository Explorer and Repository Grapher
 * Copyright (C) 2004 Blake Dickie
 *
 * This program is free software; you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation; either version 2 of the License, or 
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
 * MA 02111-1307 USA
 *
 */

package ca.uvic.cs.gold.bdickie.explorer;

import ca.uvic.cs.gold.bdickie.fs.*;
import ca.uvic.cs.gold.bdickie.db.DBConnection;
import ca.uvic.cs.gold.bdickie.*;

import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;

/** A panel for showing a MR's info.
 *
 * @author  Blake Dickie
 */
public class MRSViewPanel extends javax.swing.JPanel {
    private static final String[] columnNames =  new String [] {
        "File", "Revision", "Type", "Date", "Time", "Can View"};
    
    private String mrid;
    private MRSInfo info;
    
    
    /** Creates new form MRSViewPanel */
    public MRSViewPanel(String mrid) {
        this.mrid = mrid;
        info = DBConnection.getInstance().getMRSInfo(mrid);
        initComponents();
        
        jTable1.getSelectionModel().addListSelectionListener(new InfoTableSelectionChanged());
        jTable1.getSelectionModel().setSelectionInterval(0,0);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        infoRevisionsPopup = new javax.swing.JPopupMenu();
        mnuViewFile = new javax.swing.JMenuItem();
        mnuViewRevision = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblAuthor = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        butFile = new javax.swing.JButton();
        butRevision = new javax.swing.JButton();

        mnuViewFile.setText("View File");
        mnuViewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuViewFileActionPerformed(evt);
            }
        });

        infoRevisionsPopup.add(mnuViewFile);

        mnuViewRevision.setText("View Revision");
        mnuViewRevision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuViewRevisionActionPerformed(evt);
            }
        });

        infoRevisionsPopup.add(mnuViewRevision);

        setLayout(new java.awt.BorderLayout());

        jTable1.setModel(getTableModel());
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setPreferredSize(new java.awt.Dimension(22, 100));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(22, 100));
        txtLog.setEditable(false);
        txtLog.setText(info.getLog());
        txtLog.setLineWrap(true);
        jScrollPane2.setViewportView(txtLog);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Date:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        lblDate.setText(info.getDate());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 0);
        jPanel1.add(lblDate, gridBagConstraints);

        jLabel3.setText("Author:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        lblAuthor.setText(info.getAuthor());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 0);
        jPanel1.add(lblAuthor, gridBagConstraints);

        jPanel2.add(jPanel1, java.awt.BorderLayout.NORTH);

        add(jPanel2, java.awt.BorderLayout.SOUTH);

        butFile.setText("View File");
        butFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFileActionPerformed(evt);
            }
        });

        jPanel3.add(butFile);

        butRevision.setText("View Revision");
        butRevision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRevisionActionPerformed(evt);
            }
        });

        jPanel3.add(butRevision);

        add(jPanel3, java.awt.BorderLayout.NORTH);

    }//GEN-END:initComponents

    private void butRevisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRevisionActionPerformed
        mnuViewRevisionActionPerformed(null);
    }//GEN-LAST:event_butRevisionActionPerformed

    private void butFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFileActionPerformed
        mnuViewFileActionPerformed(null);
    }//GEN-LAST:event_butFileActionPerformed

    private void mnuViewRevisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuViewRevisionActionPerformed
        if (((Boolean)jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 5)).booleanValue())
        {
            File f = Directory.getFile((String)jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0));
            FilesTabbedPane.getInstance().openFile(f, (String)jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1),
                true, true);
        }
    }//GEN-LAST:event_mnuViewRevisionActionPerformed

    private void mnuViewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuViewFileActionPerformed
        File f = Directory.getFile((String)jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0));
        FilesTabbedPane.getInstance().openFile(f, true);
    }//GEN-LAST:event_mnuViewFileActionPerformed

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        if (evt.getButton() != evt.BUTTON1)
        {
            mnuViewRevision.setEnabled(((Boolean)jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 5)).booleanValue());
            infoRevisionsPopup.show(jTable1, evt.getX(), evt.getY());
        } else if (evt.getClickCount() == 2) {
            mnuViewFileActionPerformed(null);
        }
    }//GEN-LAST:event_jTable1MousePressed
    
    public String getMRID()
    {
        return mrid;
    }
    
    /** Gets the model for the MR's info table.
     */
    private TableModel getTableModel() {
        NonEditableTableModel result = new NonEditableTableModel(columnNames);
        result.setColumnClass(5, Boolean.class);
        Vector data = DBConnection.getInstance().getRevisionsForMRS(mrid);
        Iterator i = data.iterator();
        while(i.hasNext())
            result.addRow((Vector)i.next());
        return result;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butFile;
    private javax.swing.JButton butRevision;
    private javax.swing.JPopupMenu infoRevisionsPopup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblAuthor;
    private javax.swing.JLabel lblDate;
    private javax.swing.JMenuItem mnuViewFile;
    private javax.swing.JMenuItem mnuViewRevision;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables
    
    private class InfoTableSelectionChanged implements ListSelectionListener
    {
        public void valueChanged(javax.swing.event.ListSelectionEvent listSelectionEvent) {
            butRevision.setEnabled(((Boolean)jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 5)).booleanValue());
        }
    }
}

/* ChangeLog:
 *   $Log: MRSViewPanel.java,v $
 *   Revision 1.2  2004/12/07 17:53:23  bdickie
 *   Done Repository Grapher and added GPL boilerplate to older files.
 *
 *   Revision 1.1  2004/11/01 02:24:20  bdickie
 *   Done Repository Browser.
 *
 */
